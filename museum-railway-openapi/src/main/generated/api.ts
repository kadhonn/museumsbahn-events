/* tslint:disable */
/* eslint-disable */
/**
 * museum-railway-backend API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * 
     * @type {number}
     * @memberof Location
     */
    'lat'?: number;
    /**
     * 
     * @type {number}
     * @memberof Location
     */
    'lon'?: number;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'state': string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'street': string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'city'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'zipCode'?: string | null;
}
/**
 * 
 * @export
 * @interface MuseumLocation
 */
export interface MuseumLocation {
    /**
     * 
     * @type {string}
     * @memberof MuseumLocation
     */
    'name': string;
    /**
     * 
     * @type {MuseumType}
     * @memberof MuseumLocation
     */
    'type': MuseumType;
    /**
     * 
     * @type {string}
     * @memberof MuseumLocation
     */
    'operatorId': string;
    /**
     * 
     * @type {string}
     * @memberof MuseumLocation
     */
    'locationId': string;
    /**
     * 
     * @type {string}
     * @memberof MuseumLocation
     */
    'webUrl': string;
    /**
     * 
     * @type {string}
     * @memberof MuseumLocation
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof MuseumLocation
     */
    'imageName': string;
    /**
     * 
     * @type {string}
     * @memberof MuseumLocation
     */
    'eventCollectorType': string;
    /**
     * 
     * @type {string}
     * @memberof MuseumLocation
     */
    'eventCollectionNotPossibleReason': string;
    /**
     * 
     * @type {Location}
     * @memberof MuseumLocation
     */
    'location': Location;
}


/**
 * 
 * @export
 * @interface MuseumOperator
 */
export interface MuseumOperator {
    /**
     * 
     * @type {string}
     * @memberof MuseumOperator
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MuseumOperator
     */
    'identifier': string;
    /**
     * 
     * @type {string}
     * @memberof MuseumOperator
     */
    'webUrl': string;
    /**
     * 
     * @type {string}
     * @memberof MuseumOperator
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof MuseumOperator
     */
    'imageName': string;
    /**
     * 
     * @type {Location}
     * @memberof MuseumOperator
     */
    'location': Location;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const MuseumType = {
    Museum: 'Museum',
    ModelRailway: 'ModelRailway',
    Station: 'Station',
    Event: 'Event',
    RailLine: 'RailLine'
} as const;

export type MuseumType = typeof MuseumType[keyof typeof MuseumType];



/**
 * LocationsResourceApi - axios parameter creator
 * @export
 */
export const LocationsResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string | null} [operatorId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLocationGet: async (operatorId?: string | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (operatorId !== undefined) {
                localVarQueryParameter['operatorId'] = operatorId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocationsResourceApi - functional programming interface
 * @export
 */
export const LocationsResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocationsResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string | null} [operatorId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLocationGet(operatorId?: string | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MuseumLocation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLocationGet(operatorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LocationsResourceApi - factory interface
 * @export
 */
export const LocationsResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocationsResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {string | null} [operatorId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLocationGet(operatorId?: string | null, options?: any): AxiosPromise<Array<MuseumLocation>> {
            return localVarFp.apiLocationGet(operatorId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LocationsResourceApi - object-oriented interface
 * @export
 * @class LocationsResourceApi
 * @extends {BaseAPI}
 */
export class LocationsResourceApi extends BaseAPI {
    /**
     * 
     * @param {string | null} [operatorId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsResourceApi
     */
    public apiLocationGet(operatorId?: string | null, options?: AxiosRequestConfig) {
        return LocationsResourceApiFp(this.configuration).apiLocationGet(operatorId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ManagementResourceApi - axios parameter creator
 * @export
 */
export const ManagementResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiManageReloadDataPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/manage/reloadData`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ManagementResourceApi - functional programming interface
 * @export
 */
export const ManagementResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ManagementResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiManageReloadDataPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiManageReloadDataPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ManagementResourceApi - factory interface
 * @export
 */
export const ManagementResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ManagementResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiManageReloadDataPost(options?: any): AxiosPromise<void> {
            return localVarFp.apiManageReloadDataPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ManagementResourceApi - object-oriented interface
 * @export
 * @class ManagementResourceApi
 * @extends {BaseAPI}
 */
export class ManagementResourceApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagementResourceApi
     */
    public apiManageReloadDataPost(options?: AxiosRequestConfig) {
        return ManagementResourceApiFp(this.configuration).apiManageReloadDataPost(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OperatorsResourceApi - axios parameter creator
 * @export
 */
export const OperatorsResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOperatorGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/operator`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OperatorsResourceApi - functional programming interface
 * @export
 */
export const OperatorsResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OperatorsResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOperatorGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MuseumOperator>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOperatorGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OperatorsResourceApi - factory interface
 * @export
 */
export const OperatorsResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OperatorsResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOperatorGet(options?: any): AxiosPromise<Array<MuseumOperator>> {
            return localVarFp.apiOperatorGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OperatorsResourceApi - object-oriented interface
 * @export
 * @class OperatorsResourceApi
 * @extends {BaseAPI}
 */
export class OperatorsResourceApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorsResourceApi
     */
    public apiOperatorGet(options?: AxiosRequestConfig) {
        return OperatorsResourceApiFp(this.configuration).apiOperatorGet(options).then((request) => request(this.axios, this.basePath));
    }
}



